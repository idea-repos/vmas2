# Generated by Django 4.0.1 on 2022-08-31 10:33

import datetime
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import user_mgmt.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Permissions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('perms_alias', models.CharField(max_length=150)),
                ('perms_title', models.CharField(max_length=150)),
                ('section_alias', models.CharField(max_length=150)),
                ('section', models.CharField(max_length=150)),
                ('status', models.IntegerField()),
            ],
            options={
                'db_table': 'permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserOperations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_rule', models.CharField(max_length=150)),
                ('masked_as_operator', models.CharField(max_length=150)),
                ('masked_operator_rule', models.CharField(max_length=150)),
                ('masked_as_analyser', models.CharField(max_length=150)),
                ('masked_analyser_rule', models.CharField(max_length=150)),
                ('working_as', models.CharField(max_length=1)),
            ],
            options={
                'db_table': 'user_operations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserTypes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=50)),
                ('type_alias', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'user_types',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LimitUsers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(max_length=150)),
                ('role_id', models.CharField(max_length=50)),
                ('username', models.CharField(max_length=250)),
                ('session_id', models.CharField(max_length=250)),
                ('activity_datetime', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='MyGroup',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('auth.group',),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='GroupExtended',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ofc_reports_to', models.IntegerField(blank=True, null=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.group')),
            ],
        ),
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(blank=True, error_messages={'unique': 'This User name already exists.'}, max_length=200, unique=True, verbose_name='user name')),
                ('email', models.EmailField(max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.IntegerField(blank=True, null=True, verbose_name='role')),
                ('reporting_officer', models.IntegerField(blank=True, null=True, verbose_name='reporting officer')),
                ('is_del', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='is deleted')),
                ('last_session_updated', models.DateTimeField(default=datetime.datetime(2022, 8, 31, 16, 3, 52, 2438), verbose_name='last session updated')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            bases=(models.Model, user_mgmt.models.listings),
        ),
    ]
